# bot.py
# -*- coding: utf-8 -*-

import asyncio
import json
import logging
import os
import sqlite3
import textwrap
from datetime import datetime, timedelta, timezone
from typing import Dict, Optional, Tuple

import httpx
from aiohttp import web
from dotenv import load_dotenv
from openai import OpenAI
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.constants import ParseMode
from telegram.ext import (
    AIORateLimiter,
    Application,
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# -------------------- CONFIG & ENV --------------------

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")

YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID", "")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY", "")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "").rstrip("/")  # —Ç–≤–æ–π –ø—É–±–ª–∏—á–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–∏—Å–∞
PORT = int(os.getenv("PORT", "8080"))  # –ø–æ—Ä—Ç –¥–ª—è aiohttp –≤–µ–±—Ö—É–∫–æ–≤ –ÆKassa

# –ü–∞–∫–µ—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ —Ü–µ–Ω—ã, —Ä—É–±
PACKAGES: Dict[str, Dict] = {
    "pack_7": {"title": "7 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", "count": 7, "price": 260},
    "pack_30": {"title": "30 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", "count": 30, "price": 1050},
    "pack_365": {"title": "365 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", "count": 365, "price": 12350},
}

# –¢–µ–º—ã (–º–æ–∂–µ—à—å —Ä–∞—Å—à–∏—Ä—è—Ç—å)
THEMES = [
    "–û–±—É—á–µ–Ω–∏–µ/–°–æ–≤–µ—Ç—ã",
    "–õ–∞–π—Ñ—Å—Ç–∞–π–ª/–î–µ–Ω—å –∏–∑ –∂–∏–∑–Ω–∏",
    "–Æ–º–æ—Ä/–°–∫–µ—Ç—á–∏",
    "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ/–ú–æ—Ç–∏–≤–∞—Ü–∏—è",
    "–ë–∏–∑–Ω–µ—Å/–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "–ö—Ä–∞—Å–æ—Ç–∞/–§–∏—Ç–Ω–µ—Å",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
    "–ò–≥—Ä—ã/–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
    "–§–∞–∫—Ç—ã/–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ",
    "–ò—Å—Ç–æ—Ä–∏–∏/–°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥",
]

# –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏/–∫–Ω–æ–ø–∫–∏
EXTRA_TOOLS = [
    ("‚ö° –•—É–∫–∏ –¥–ª—è —Ä–æ–ª–∏–∫–æ–≤", "tool_hooks"),
    ("ü™Ñ –ò–¥–µ–∏ –∑–∞—Å—Ç–∞–≤–æ–∫ (–æ–±–ª–æ–∂–µ–∫)", "tool_covers"),
]

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = os.getenv("DB_PATH", "db.sqlite3")

# –ú–æ–¥–µ–ª—å OpenAI (–º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥—Ä—É–≥–æ–π)
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")


# -------------------- LOGGING --------------------

logger = logging.getLogger("reels-ideas-bot")
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)

# -------------------- OPENAI CLIENT --------------------

client = OpenAI(api_key=OPENAI_API_KEY)


# -------------------- DATABASE LAYER --------------------

def db() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn


def init_db() -> None:
    conn = db()
    cur = conn.cursor()
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            balance INTEGER DEFAULT 0, -- –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
            last_free_at TEXT,         -- ISO datetime UTC –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ
            total_generated INTEGER DEFAULT 0,
            created_at TEXT
        )
        """
    )
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            package_code TEXT,
            package_count INTEGER,
            amount INTEGER,
            status TEXT,               -- 'pending' | 'succeeded' | 'canceled'
            yk_id TEXT,                -- id –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
            created_at TEXT,
            updated_at TEXT,
            FOREIGN KEY(user_id) REFERENCES users(user_id)
        )
        """
    )
    conn.commit()
    conn.close()


def get_or_create_user(user_id: int, username: Optional[str]) -> sqlite3.Row:
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    if row is None:
        now = datetime.now(timezone.utc).isoformat()
        cur.execute(
            "INSERT INTO users (user_id, username, balance, last_free_at, total_generated, created_at) "
            "VALUES (?, ?, 0, NULL, 0, ?)",
            (user_id, username, now),
        )
        conn.commit()
        cur.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
        row = cur.fetchone()
    conn.close()
    return row


def update_user_balance(user_id: int, delta: int) -> None:
    conn = db()
    cur = conn.cursor()
    cur.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (delta, user_id))
    conn.commit()
    conn.close()


def set_user_last_free(user_id: int, when_utc: datetime) -> None:
    conn = db()
    cur = conn.cursor()
    cur.execute(
        "UPDATE users SET last_free_at=? WHERE user_id=?",
        (when_utc.astimezone(timezone.utc).isoformat(), user_id),
    )
    conn.commit()
    conn.close()


def inc_total_generated(user_id: int) -> None:
    conn = db()
    cur = conn.cursor()
    cur.execute("UPDATE users SET total_generated = total_generated + 1 WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()


def create_payment(
    user_id: int, package_code: str, yk_id: str, amount: int, status: str
) -> int:
    conn = db()
    cur = conn.cursor()
    created = datetime.now(timezone.utc).isoformat()
    package_count = PACKAGES[package_code]["count"]
    cur.execute(
        """
        INSERT INTO payments (user_id, package_code, package_count, amount, status, yk_id, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """,
        (user_id, package_code, package_count, amount, status, yk_id, created, created),
    )
    conn.commit()
    payment_id = cur.lastrowid
    conn.close()
    return payment_id


def update_payment_status(yk_id: str, new_status: str) -> Optional[sqlite3.Row]:
    conn = db()
    cur = conn.cursor()
    cur.execute("UPDATE payments SET status=?, updated_at=? WHERE yk_id=?", (new_status, datetime.now(timezone.utc).isoformat(), yk_id))
    conn.commit()
    cur.execute("SELECT * FROM payments WHERE yk_id=?", (yk_id,))
    row = cur.fetchone()
    conn.close()
    return row


def get_payment_by_yk_id(yk_id: str) -> Optional[sqlite3.Row]:
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT * FROM payments WHERE yk_id=?", (yk_id,))
    row = cur.fetchone()
    conn.close()
    return row


# -------------------- UI HELPERS --------------------

def main_menu_kb() -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton("üé¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", callback_data="gen"),
        ],
        [
            InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏", callback_data="buy"),
            InlineKeyboardButton("üßÆ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
        ],
    ]
    # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏—à–∫–∏
    extra = [InlineKeyboardButton(title, callback_data=cd) for title, cd in EXTRA_TOOLS]
    # –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    for i in range(0, len(extra), 2):
        rows.append(extra[i : i + 2])
    return InlineKeyboardMarkup(rows)


def themes_kb() -> InlineKeyboardMarkup:
    rows = []
    for name in THEMES:
        rows.append([InlineKeyboardButton(name, callback_data=f"theme::{name}")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")])
    return InlineKeyboardMarkup(rows)


def buy_kb() -> InlineKeyboardMarkup:
    rows = []
    for code, meta in PACKAGES.items():
        rows.append(
            [
                InlineKeyboardButton(
                    f"{meta['title']} ‚Äî {meta['price']}‚ÇΩ", callback_data=f"buy::{code}"
                )
            ]
        )
    rows.append([InlineKeyboardButton("üßæ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_pay")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")])
    return InlineKeyboardMarkup(rows)


def back_main_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_main")]])


# -------------------- TEXT TEMPLATES --------------------

WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–µ–Ω–µ—Ä–∏—Ä—É—é **–≤–∏—Ä—É—Å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏** –¥–ª—è Reels/Shorts/TikTok.\n\n"
    "‚Ä¢ 1Ô∏è‚É£ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π **—Ä–∞–∑ –≤ 7 –¥–Ω–µ–π**\n"
    "‚Ä¢ üõí –ü–∞–∫–µ—Ç—ã: 7 / 30 / 365 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n"
    "‚Ä¢ üß† –£—á–∏—Ç—ã–≤–∞—é —Ç—Ä–µ–Ω–¥—ã, —Ö—É–∫–∏, —Ç–∞–π–º–∏–Ω–≥–∏, —Ç–µ–∫—Å—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ, —Ö–µ—à—Ç–µ–≥–∏, CTA\n\n"
    "–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá"
)

ABOUT = (
    "ü§ñ *ReelsIdeas Pro*\n"
    "‚Äî –ü–æ–ª–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å —Ç–æ—á–Ω—ã–º–∏ —Ç–∞–π–º–∫–æ–¥–∞–º–∏, —Ö—É–∫–∞–º–∏ –∏ –ª–∏—Å—Ç–æ–º —à–æ—Ç–æ–≤\n"
    "‚Äî –ü–æ–¥–ø–∏—Å—å, —Ö–µ—à—Ç–µ–≥–∏, CTA –∏ –≤–∞—Ä–∏–∞—Ü–∏–∏ –ø–æ–¥ –Ω–∏—à–∏\n"
    "‚Äî –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ (–≤ —Ç.—á. —Ä–µ–º–∏–∫—Å—ã/—Ä–µ—Ñ—Ä–µ–π–º—ã)\n\n"
    "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa. –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–ø–∞–¥—É—Ç –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.\n"
)

FREE_COOLDOWN_HOURS = 24 * 7  # 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞–∑ –≤ 7 –¥–Ω–µ–π


# -------------------- OPENAI PROMPT --------------------

def build_prompt(theme: str, niche: Optional[str], tone: Optional[str]) -> str:
    niche = niche or "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–∏—à–∞"
    tone = tone or "–¥–∏–Ω–∞–º–∏—á–Ω—ã–π, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π"
    today = datetime.now().strftime("%Y-%m-%d")

    return textwrap.dedent(f"""
    –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ short-form –≤–∏–¥–µ–æ –∏ –ø—Ä–æ–¥—é—Å–µ—Ä –≤–∏—Ä—É—Å–Ω—ã—Ö Reels/Shorts/TikTok.
    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π *–ø–æ–ª–Ω—ã–π* –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Ä–æ–ª–∏–∫–∞ –ø–æ–¥ —Ç–µ–º—É: **{theme}**.
    –ù–∏—à–∞: {niche}. –¢–æ–Ω: {tone}. –î–∞—Ç–∞: {today}.
    –£—á—Ç–∏ *–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏ —Ç—Ä–µ–Ω–¥—ã* (–≤–∏—Ä–∞–ª—å–Ω—ã–µ —Ö—É–∫–∏, —Ä–µ–º–∏–∫—Å—ã, –±—ã—Å—Ç—Ä—ã–π –º–æ–Ω—Ç–∞–∂, —Å—É–±—Ç–∏—Ç—Ä—ã, B-roll, jump-cut, –º–∏–∫—Å UGC/—Å—Ç–æ–∫–æ–≤).

    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤—ã–¥–∞—á–µ:
    1) –ù–∞–∑–≤–∞–Ω–∏–µ (—Ü–µ–ø–∫–æ–µ, 45‚Äì60 —Å–∏–º–≤–æ–ª–æ–≤).
    2) –•—É–∫ (1‚Äì2 —Å—Ç—Ä–æ–∫–∏, –ø–µ—Ä–≤—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã).
    3) –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (0‚Äì3, 3‚Äì7, 7‚Äì15, 15‚Äì25, 25‚Äì35 –∏ —Ç.–ø.).
    4) –õ–∏—Å—Ç —à–æ—Ç–æ–≤: —á—Ç–æ –≤ –∫–∞–¥—Ä–µ, —Ä–∞–∫—É—Ä—Å, –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã, B-roll, –ø–µ—Ä–µ—Ö–æ–¥—ã.
    5) –¢–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ (–∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ).
    6) –†–µ–ø–ª–∏–∫–∏/–∑–∞–∫–∞–¥—Ä–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω).
    7) –ü–æ–¥–ø–∏—Å—å –∫ —Ä–æ–ª–∏–∫—É (1‚Äì2 –≤–∞—Ä–∏–∞–Ω—Ç–∞) + *20 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤* (—Å–º–µ—à–∞–π –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–µ/–Ω–∏–∑–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–µ).
    8) –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (—Å–∏–ª—å–Ω—ã–π, –±–µ–∑ –∫–ª–∏—à–µ).
    9) –ò–¥–µ–∏ –¥–ª—è —Ä–µ–º–∏–∫—Å–∞/—Ä–µ—Ñ—Ä–µ–π–º–∞ —ç—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è.
    10) –ü–æ–¥–±–æ—Ä —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏: 3‚Äì5 –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤ (–∂–∞–Ω—Ä/—Ç–µ–º–ø/–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ).

    –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
    """)


async def generate_script(theme: str, niche: Optional[str], tone: Optional[str]) -> str:
    prompt = build_prompt(theme, niche, tone)
    resp = client.chat.completions.create(
        model=OPENAI_MODEL,
        messages=[
            {"role": "system", "content": "–¢—ã —Å–∏–ª—å–Ω—ã–π –ø—Ä–æ–¥—é—Å–µ—Ä –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –∏ —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç. –ü–∏—à–∏ —Å–∂–∞—Ç–æ, –ø–æ –¥–µ–ª—É, –Ω–æ —è—Ä–∫–æ."},
            {"role": "user", "content": prompt},
        ],
        temperature=0.9,
        max_tokens=1200,
    )
    content = resp.choices[0].message.content
    return content


async def generate_hooks(niche: Optional[str]) -> str:
    niche = niche or "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–∏—à–∞"
    resp = client.chat.completions.create(
        model=OPENAI_MODEL,
        messages=[
            {"role": "system", "content": "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –º–æ—â–Ω—ã–µ —Ö—É–∫-—Ñ—Ä–∞–∑—ã –¥–ª—è –ø–µ—Ä–≤—ã—Ö 2 —Å–µ–∫—É–Ω–¥ —Ä–æ–ª–∏–∫–∞."},
            {"role": "user", "content": f"–î–∞–π 20 —É–ª—å—Ç—Ä–∞—Ü–µ–ø–∫–∏—Ö —Ö—É–∫-—Ñ—Ä–∞–∑ –¥–ª—è —Ä–æ–ª–∏–∫–æ–≤ Reels –ø–æ –Ω–∏—à–µ: {niche}. –ö–æ—Ä–æ—Ç–∫–æ, 3‚Äì7 —Å–ª–æ–≤."},
        ],
        temperature=0.9,
        max_tokens=500,
    )
    return resp.choices[0].message.content


async def generate_covers(niche: Optional[str]) -> str:
    niche = niche or "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–∏—à–∞"
    resp = client.chat.completions.create(
        model=OPENAI_MODEL,
        messages=[
            {"role": "system", "content": "–¢—ã –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—à—å —è—Ä–∫–∏–µ –æ–±–ª–æ–∂–∫–∏/–∑–∞—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ."},
            {"role": "user", "content": f"–î–∞–π 15 –∏–¥–µ–π –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ –æ–±–ª–æ–∂–µ–∫ (–æ–±–ª–æ–∂–∫–∞/—Ç–∏—Ç—Ä 1‚Äì4 —Å–ª–æ–≤–∞) –¥–ª—è Reels –ø–æ –Ω–∏—à–µ: {niche}. –ë–µ–∑ –∫–∞–≤—ã—á–µ–∫, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É."},
        ],
        temperature=0.8,
        max_tokens=400,
    )
    return resp.choices[0].message.content


# -------------------- YOOKASSA API --------------------

YK_BASE = "https://api.yookassa.ru/v3"


def yk_auth() -> Tuple[str, str]:
    # basic auth (shopId:secretKey)
    return (YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY)


async def yk_create_payment(
    user_id: int, package_code: str
) -> Tuple[str, str]:
    """
    –°–æ–∑–¥–∞—ë—Ç –ø–ª–∞—Ç–µ–∂ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (yk_id, confirmation_url)
    """
    meta = PACKAGES[package_code]
    amount = meta["price"]
    title = meta["title"]

    payload = {
        "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
        "capture": True,
        "description": f"–ü–∞–∫–µ—Ç: {title} –¥–ª—è user {user_id}",
        "confirmation": {
            "type": "redirect",
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—ë—Ç—Å—è —Å—é–¥–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –≤–µ–±—Ö—É–∫ –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç)
            "return_url": f"{WEBHOOK_URL}/thankyou",
        },
        # –ß—Ç–æ–±—ã –≤ –≤–µ–±—Ö—É–∫–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ —ç—Ç–æ –Ω–∞—à –∑–∞–∫–∞–∑
        "metadata": {
            "tg_user_id": user_id,
            "package_code": package_code,
        },
    }

    idem_key = os.urandom(16).hex()

    async with httpx.AsyncClient(timeout=30) as x:
        r = await x.post(
            f"{YK_BASE}/payments",
            json=payload,
            headers={"Idempotence-Key": idem_key, "Content-Type": "application/json"},
            auth=yk_auth(),
        )
    if r.status_code not in (200, 201):
        logger.error("YooKassa create failed: %s %s", r.status_code, r.text)
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    data = r.json()
    yk_id = data["id"]
    confirmation_url = data["confirmation"]["confirmation_url"]

    # –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å
    create_payment(
        user_id=user_id,
        package_code=package_code,
        yk_id=yk_id,
        amount=amount,
        status="pending",
    )
    return yk_id, confirmation_url


async def yk_get_payment(yk_id: str) -> dict:
    async with httpx.AsyncClient(timeout=20) as x:
        r = await x.get(
            f"{YK_BASE}/payments/{yk_id}",
            auth=yk_auth(),
        )
    if r.status_code != 200:
        logger.error("YooKassa get failed: %s %s", r.status_code, r.text)
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂.")
    return r.json()


# -------------------- AIOHTTP WEBHOOK (YooKassa) --------------------

async def yk_webhook_handler(request: web.Request) -> web.Response:
    try:
        body = await request.text()
        data = json.loads(body)
    except Exception:
        return web.Response(status=400, text="Bad JSON")

    event = data.get("event")
    obj = data.get("object", {})
    yk_id = obj.get("id")

    logger.info("Webhook event: %s %s", event, yk_id)

    if not yk_id:
        return web.Response(status=400, text="No payment id")

    if event == "payment.succeeded":
        # –æ—Ç–º–µ—Ç–∏—Ç—å –≤ –ë–î, –Ω–∞—á–∏—Å–ª–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏
        row = update_payment_status(yk_id, "succeeded")
        if row:
            update_user_balance(row["user_id"], row["package_count"])
            logger.info("Payment %s succeeded -> +%s to user %s",
                        yk_id, row["package_count"], row["user_id"])
    elif event in ("payment.canceled", "payment.waiting_for_capture", "refund.succeeded"):
        update_payment_status(yk_id, "canceled")

    return web.Response(text="ok")


async def run_web_server() -> web.AppRunner:
    """
    –õ—ë–≥–∫–∏–π aiohttp —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –ÆKassa.
    –ù–µ –º–µ—à–∞–µ—Ç polling –¢–µ–ª–µ–≥—Ä–∞–º–∞.
    """
    app = web.Application()
    app.router.add_post("/yookassa/webhook", yk_webhook_handler)
    app.router.add_get("/thankyou", lambda r: web.Response(text="–°–ø–∞—Å–∏–±–æ! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ Telegram."))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logger.info("YooKassa webhook server started on port %s", PORT)
    return runner


# -------------------- BOT HANDLERS --------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    get_or_create_user(user.id, user.username)
    await update.effective_message.reply_text(WELCOME, reply_markup=main_menu_kb(), parse_mode=ParseMode.MARKDOWN)


async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–µ–Ω—é
    await update.effective_message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())


async def main_menu_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    data = q.data
    user = q.from_user
    get_or_create_user(user.id, user.username)

    if data == "gen":
        await q.edit_message_text(
            "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è üëá\n(–∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é —Ç–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)",
            reply_markup=themes_kb(),
        )
        context.user_data["gen_state"] = "choose_theme"
        return

    if data == "buy":
        await q.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:",
            reply_markup=buy_kb(),
        )
        return

    if data == "balance":
        conn = db()
        cur = conn.cursor()
        cur.execute("SELECT balance, last_free_at, total_generated FROM users WHERE user_id=?", (user.id,))
        row = cur.fetchone()
        conn.close()
        last_free_text = "–µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
        if row["last_free_at"]:
            dt = datetime.fromisoformat(row["last_free_at"])
            delta = datetime.now(timezone.utc) - dt.astimezone(timezone.utc)
            remain = max(0, FREE_COOLDOWN_HOURS - int(delta.total_seconds() // 3600))
            last_free_text = f"–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ~{remain} —á" if remain > 0 else "–¥–æ—Å—Ç—É–ø–µ–Ω —Å–µ–π—á–∞—Å"
        text = (
            f"üßÆ *–í–∞—à –±–∞–ª–∞–Ω—Å*: **{row['balance']}** —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n"
            f"üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {last_free_text}\n"
            f"üìà –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {row['total_generated']}"
        )
        await q.edit_message_text(text, reply_markup=back_main_kb(), parse_mode=ParseMode.MARKDOWN)
        return

    if data == "about":
        await q.edit_message_text(ABOUT, reply_markup=back_main_kb(), parse_mode=ParseMode.MARKDOWN)
        return

    if data == "back_main":
        await q.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        context.user_data.clear()
        return

    if data.startswith("theme::"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–¥–Ω—É –∏–∑ –∑–∞–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–º
        theme = data.split("::", 1)[1]
        context.user_data["chosen_theme"] = theme
        await q.edit_message_text(
            f"–¢–µ–º–∞: *{theme}*\n\n–ù–∞–ø–∏—à–∏ –Ω–∏—à—É/–∞–∫–∫–∞—É–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—Ñ–∏—Ç–Ω–µ—Å –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤¬ª) –∏ –∂–µ–ª–∞–µ–º—ã–π —Ç–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∏—Ä–æ–Ω–∏—á–Ω—ã–π¬ª). "
            f"–§–æ—Ä–º–∞—Ç: `–Ω–∏—à–∞; —Ç–æ–Ω`\n\n–ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å ¬´-¬ª.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=back_main_kb(),
        )
        context.user_data["gen_state"] = "await_niche_tone"
        return

    if data in ("tool_hooks", "tool_covers"):
        # —Å–ø—Ä–æ—Å–∏–º –Ω–∏—à—É
        key = "hooks" if data == "tool_hooks" else "covers"
        context.user_data["tool_mode"] = key
        await q.edit_message_text(
            "–í–≤–µ–¥–∏ –Ω–∏—à—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤¬ª). –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤—å ¬´-¬ª.",
            reply_markup=back_main_kb(),
        )
        return

    if data.startswith("buy::"):
        package_code = data.split("::", 1)[1]
        try:
            yk_id, url = await yk_create_payment(user.id, package_code)
        except Exception as e:
            await q.edit_message_text(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}", reply_markup=back_main_kb())
            return

        text = (
            f"üßæ –ó–∞–∫–∞–∑: *{PACKAGES[package_code]['title']}* –Ω–∞ —Å—É–º–º—É *{PACKAGES[package_code]['price']}‚ÇΩ*.\n\n"
            f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{url}\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ–∂–¥–∏—Ç–µ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª."
        )
        await q.edit_message_text(text, reply_markup=buy_kb(), parse_mode=ParseMode.MARKDOWN)
        return

    if data == "check_pay":
        # –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç—É—Å–µ pending (–µ—Å–ª–∏ –∑–∞—Ö–æ—Ç—è—Ç)
        conn = db()
        cur = conn.cursor()
        cur.execute(
            "SELECT * FROM payments WHERE user_id=? AND status='pending' ORDER BY id DESC LIMIT 1",
            (user.id,),
        )
        row = cur.fetchone()
        conn.close()
        if not row:
            await q.edit_message_text("–ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.", reply_markup=buy_kb())
            return
        try:
            info = await yk_get_payment(row["yk_id"])
            status = info["status"]
            if status == "succeeded":
                # –Ω–∞—á–∏—Å–ª—è–µ–º, –µ—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –≤–µ–±—Ö—É–∫ –Ω–µ –ø—Ä–∏—à—ë–ª
                update_payment_status(row["yk_id"], "succeeded")
                update_user_balance(row["user_id"], row["package_count"])
                await q.edit_message_text("–û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!", reply_markup=back_main_kb())
            elif status == "canceled":
                update_payment_status(row["yk_id"], "canceled")
                await q.edit_message_text("–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=back_main_kb())
            else:
                await q.edit_message_text(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.", reply_markup=buy_kb())
        except Exception as e:
            await q.edit_message_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: {e}", reply_markup=buy_kb())
        return


async def on_message_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤ —à–∞–≥–∞—Ö:
    - –≤–≤–æ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–µ–º—ã
    - –≤–≤–æ–¥ –Ω–∏—à–∏/—Ç–æ–Ω–∞
    - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (—Ö—É–∫–∏/–æ–±–ª–æ–∂–∫–∏)
    """
    user = update.effective_user
    text = (update.message.text or "").strip()
    state = context.user_data.get("gen_state")
    tool_mode = context.user_data.get("tool_mode")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã, –∞ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π —Ç–µ–∫—Å—Ç (= —Å–≤–æ—è —Ç–µ–º–∞)
    if state == "choose_theme":
        theme = text
        context.user_data["chosen_theme"] = theme
        await update.message.reply_text(
            f"–¢–µ–º–∞: *{theme}*\n\n–ù–∞–ø–∏—à–∏ –Ω–∏—à—É –∏ —Ç–æ–Ω —á–µ—Ä–µ–∑ ¬´;¬ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: `–Ω–∏—à–∞; —Ç–æ–Ω`.\n–ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å ¬´-¬ª.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=back_main_kb(),
        )
        context.user_data["gen_state"] = "await_niche_tone"
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∏—à—É/—Ç–æ–Ω
    if state == "await_niche_tone":
        niche, tone = None, None
        if text != "-":
            parts = [p.strip() for p in text.split(";")]
            if len(parts) >= 1:
                niche = parts[0] or None
            if len(parts) >= 2:
                tone = parts[1] or None
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
        await process_generation(update, context, user.id, niche, tone)
        context.user_data.clear()
        return

    # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    if tool_mode == "hooks":
        niche = None if text == "-" else text
        await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ö—É–∫-—Ñ—Ä–∞–∑—ã‚Ä¶")
        try:
            hooks = await generate_hooks(niche)
            await update.message.reply_text(hooks, reply_markup=back_main_kb())
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ò–ò: {e}", reply_markup=back_main_kb())
        context.user_data.clear()
        return

    if tool_mode == "covers":
        niche = None if text == "-" else text
        await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏ –æ–±–ª–æ–∂–µ–∫‚Ä¶")
        try:
            covers = await generate_covers(niche)
            await update.message.reply_text(covers, reply_markup=back_main_kb())
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ò–ò: {e}", reply_markup=back_main_kb())
        context.user_data.clear()
        return

    # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –º–µ–Ω—é
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())


async def process_generation(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_id: int,
    niche: Optional[str],
    tone: Optional[str],
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ / –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT balance, last_free_at FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    conn.close()

    now = datetime.now(timezone.utc)

    def can_use_free() -> bool:
        if not row["last_free_at"]:
            return True
        last = datetime.fromisoformat(row["last_free_at"]).astimezone(timezone.utc)
        return (now - last) >= timedelta(hours=FREE_COOLDOWN_HOURS)

    # –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –∏–∑ user_data
    theme = context.user_data.get("chosen_theme") or "–û–±—â–∞—è —Ç–µ–º–∞"

    # –†–µ—à–∞–µ–º —á–µ–º –ø–ª–∞—Ç–∏—Ç—å
    if row["balance"] > 0:
        # —Å–ø–∏—Å—ã–≤–∞–µ–º 1 —Å—Ü–µ–Ω–∞—Ä–∏–π
        update_user_balance(user_id, -1)
        paid_by = "–±–∞–ª–∞–Ω—Å (-1)"
    elif can_use_free():
        set_user_last_free(user_id, now)
        paid_by = "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞ –Ω–µ–¥–µ–ª—é"
    else:
        remain_hours =  (datetime.fromisoformat(row["last_free_at"]).astimezone(timezone.utc) + timedelta(hours=FREE_COOLDOWN_HOURS) - now)
        hours = int(remain_hours.total_seconds() // 3600)
        await update.message.reply_text(
            f"–£–≤—ã, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ ~{hours} —á.\n"
            f"–ö—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ö—É–ø–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏¬ª.",
            reply_markup=buy_kb(),
        )
        return

    await update.message.reply_text(f"–ì–æ—Ç–æ–≤–ª—é —Å—Ü–µ–Ω–∞—Ä–∏–π ({paid_by})‚Ä¶")

    try:
        script = await generate_script(theme, niche, tone)
        inc_total_generated(user_id)
        # –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (—Ä–∞–∑–±–∏–≤–∫–∞ –µ—Å–ª–∏ >4096)
        for chunk in split_message(script, 3900):
            await update.message.reply_text(chunk, parse_mode=ParseMode.MARKDOWN)
        await update.message.reply_text("–ì–æ—Ç–æ–≤–æ ‚úÖ", reply_markup=main_menu_kb())
    except Exception as e:
        # –µ—Å–ª–∏ —Å–ø–∏—Å–∞–ª–∏ –±–∞–ª–∞–Ω—Å –∏ —É–ø–∞–ª–∏ ‚Äî –≤–µ—Ä–Ω—ë–º 1 —Å—Ü–µ–Ω–∞—Ä–∏–π
        if paid_by.startswith("–±–∞–ª–∞–Ω—Å"):
            update_user_balance(user_id, +1)
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å: {e}", reply_markup=main_menu_kb())


def split_message(text: str, limit: int) -> list:
    parts = []
    buf = []
    cur = 0
    for line in text.splitlines(keepends=True):
        if cur + len(line) > limit and buf:
            parts.append("".join(buf))
            buf = [line]
            cur = len(line)
        else:
            buf.append(line)
            cur += len(line)
    if buf:
        parts.append("".join(buf))
    return parts


# -------------------- APPLICATION SETUP --------------------

def build_app() -> Application:
    app = (
        ApplicationBuilder()
        .token(TELEGRAM_BOT_TOKEN)
        .rate_limiter(AIORateLimiter())
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", start))

    app.add_handler(CallbackQueryHandler(main_menu_cb))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message_text))
    app.add_handler(MessageHandler(filters.ALL, on_text))  # –∑–∞–ø–∞—Å–Ω–æ–π

    return app


async def main():
    if not TELEGRAM_BOT_TOKEN:
        logger.error("No TELEGRAM_BOT_TOKEN provided")
        return
    if not OPENAI_API_KEY:
        logger.warning("No OPENAI_API_KEY provided ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç")

    logger.info("Starting bot...")
    init_db()

    # –∑–∞–ø—É—Å–∫–∞–µ–º aiohttp –≤–µ–±—Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –ÆKassa
    runner = await run_web_server()

    app = build_app()
    # —É–¥–∞–ª–∏–º –≤–µ–±—Ö—É–∫ TG (–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º polling)
    await app.bot.delete_webhook()
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    logger.info("Application started")

    # –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å
    try:
        await asyncio.Event().wait()
    finally:
        await app.updater.stop()
        await app.stop()
        await app.shutdown()
        await runner.cleanup()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped")
