# -*- coding: utf-8 -*-
"""
Reels/TikTok Ideas Bot ‚Äî PTB v22.3, polling, Stars –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è, OpenAI
"""

import asyncio
import datetime as dt
import logging
import os
import re
import sqlite3
import textwrap
from typing import List, Optional, Tuple

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    LabeledPrice,
)
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    PreCheckoutQueryHandler,
    filters,
)

# ---------- ENV ----------
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = os.getenv("MODEL_NAME", "gpt-4o-mini")
DAILY_FREE_QUOTA = int(os.getenv("DAILY_FREE_QUOTA", "1"))
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0"))

if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

# ---------- LOG ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("reels-ideas-bot")
log.info("Starting bot...")

# ---------- DB ----------
DB_PATH = "./data.db"
os.makedirs(os.path.dirname(DB_PATH) if os.path.dirname(DB_PATH) else ".", exist_ok=True)
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
conn.execute("""
CREATE TABLE IF NOT EXISTS users(
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_seen DATE,
    last_seen DATE,
    free_used_today INTEGER DEFAULT 0,
    last_reset DATE,
    premium_until DATE,
    stars_balance INTEGER DEFAULT 0
)""")
conn.execute("""
CREATE TABLE IF NOT EXISTS cache(
    niche TEXT PRIMARY KEY,
    ideas TEXT,
    updated_at DATE
)""")
conn.execute("""
CREATE TABLE IF NOT EXISTS favorites(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    niche TEXT,
    idea TEXT,
    created_at DATE
)""")
conn.execute("""
CREATE TABLE IF NOT EXISTS history(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    niche TEXT,
    ideas TEXT,
    created_at DATE
)""")
conn.commit()

# ---------- Utils ----------
MDV2_SPECIALS = r"_*[]()~`>#+-=|{}.!"
def md2_escape(text: str) -> str:
    return re.sub(f"([{re.escape(MDV2_SPECIALS)}])", r"\\\1", text)

def chunk(text: str, size: int = 3500) -> List[str]:
    parts, buf, total = [], [], 0
    for line in text.splitlines(True):
        ln = len(line)
        if total + ln > size and buf:
            parts.append("".join(buf))
            buf, total = [line], ln
        else:
            buf.append(line)
            total += ln
    if buf:
        parts.append("".join(buf))
    return parts

def today() -> dt.date:
    return dt.datetime.utcnow().date()

def ensure_user(u: "telegram.User"):
    now = today()
    with conn:
        cur = conn.execute("SELECT user_id, last_reset FROM users WHERE user_id=?", (u.id,))
        row = cur.fetchone()
        if row is None:
            conn.execute(
                "INSERT INTO users(user_id, username, first_seen, last_seen, free_used_today, last_reset, stars_balance) VALUES (?, ?, ?, ?, 0, ?, 0)",
                (u.id, u.username or "", now, now, now),
            )
        else:
            _, last_reset = row
            if (last_reset or "") != str(now):
                conn.execute(
                    "UPDATE users SET free_used_today=0, last_reset=?, last_seen=? WHERE user_id=?",
                    (now, now, u.id),
                )
            else:
                conn.execute("UPDATE users SET last_seen=? WHERE user_id=?", (now, u.id))

def get_quota_state(user_id: int) -> Tuple[int, int, bool, int]:
    cur = conn.execute("SELECT free_used_today, premium_until, stars_balance FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    used, premium_until, stars_balance = (row or (0, None, 0))
    is_premium = False
    if premium_until:
        try:
            is_premium = dt.date.fromisoformat(str(premium_until)) >= today()
        except Exception:
            is_premium = False
    return used or 0, DAILY_FREE_QUOTA, is_premium, stars_balance or 0

def inc_quota(user_id: int):
    with conn:
        conn.execute("UPDATE users SET free_used_today = COALESCE(free_used_today,0) + 1 WHERE user_id=?", (user_id,))

def add_history(user_id: int, niche: str, ideas: str):
    with conn:
        conn.execute("INSERT INTO history(user_id, niche, ideas, created_at) VALUES (?, ?, ?, ?)",
                     (user_id, niche.strip(), ideas, today()))
        # –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π
        conn.execute("""
        DELETE FROM history WHERE id NOT IN (
            SELECT id FROM history WHERE user_id=? ORDER BY id DESC LIMIT 50
        ) AND user_id=?""", (user_id, user_id))

def list_history(user_id: int) -> List[Tuple[str, str, str]]:
    cur = conn.execute("SELECT created_at, niche, ideas FROM history WHERE user_id=? ORDER BY id DESC LIMIT 10", (user_id,))
    return cur.fetchall()

def set_premium(user_id: int, days: int):
    cur = conn.execute("SELECT premium_until FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    start = today()
    if row and row[0]:
        try:
            current = dt.date.fromisoformat(str(row[0]))
            if current > start:
                start = current
        except Exception:
            pass
    new_until = start + dt.timedelta(days=days)
    with conn:
        conn.execute("UPDATE users SET premium_until=? WHERE user_id=?", (new_until, user_id))
    return new_until

def add_stars(user_id: int, amount: int):
    with conn:
        conn.execute("UPDATE users SET stars_balance=COALESCE(stars_balance,0)+? WHERE user_id=?", (amount, user_id))

def consume_star_or_none(user_id: int) -> bool:
    cur = conn.execute("SELECT stars_balance FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    bal = (row[0] if row else 0) or 0
    if bal > 0:
        with conn:
            conn.execute("UPDATE users SET stars_balance=stars_balance-1 WHERE user_id=?", (user_id,))
        return True
    return False

# ---------- –õ–æ–∫–∞–ª—å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã ----------
LOCAL_TEMPLATES = [
    ("Before/After", "–ü–æ–∫–∞–∂–∏ –¥–æ/–ø–æ—Å–ª–µ –≤ –Ω–∏—à–µ {niche}: 3 —à–∞–≥–∞, 30 —Å–µ–∫—É–Ω–¥, –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞."),
    ("1 –û—à–∏–±–∫–∞ ‚Äî 1 –§–∏–∫—Å", "–ì–ª–∞–≤–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {niche} –∏ –ø—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –Ω–∞–≥–ª—è–¥–Ω—ã–º –ø—Ä–∏–º–µ—Ä–æ–º."),
    ("–ú–∏—Ñ vs –§–∞–∫—Ç", "–†–∞—Å–∫—Ä–æ–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –º–∏—Ñ –≤ {niche} –∏ –ø–æ–¥–∫—Ä–µ–ø–∏ 2 —Ñ–∞–∫—Ç–∞–º–∏ + –º–∏–Ω–∏-–∫–µ–π—Å."),
    ("Hook-–°—Ç–æ–ø–ø–µ—Ä", "–°–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä ¬´—Å—Ç–æ–ø-–ª–µ–Ω—Ç—É¬ª –ø–æ —Ç–µ–º–µ {niche}, –∑–∞—Ç–µ–º —Ä–∞—Å–∫—Ä–æ–π 3 bullets."),
    ("–ß–µ–∫-–ª–∏—Å—Ç", "–î–∞–π 5 –ø—É–Ω–∫—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ {niche} –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–ø–æ–¥–µ–ª–∏—Ç—å—Å—è."),
]
TREND_SOUNDS = ["–ü–µ—Ä–µ—Ö–æ–¥ —Å —Ö–ª–æ–ø–∫–æ–º", "Lo-fi", "Upbeat pop", "Trap beat", "Retro 80s"]
TREND_TAGS = ["#–¥–ª—è–≤–∞—Å", "#—Ä–µ–∞–ª–∏—Ç–∏", "#—Å–æ–≤–µ—Ç—ã", "#–∫–æ–Ω—Ç–µ–Ω—Ç–ø–ª–∞–Ω", "#—Ç—Ä–µ–Ω–¥—ã"]

def local_generate_ideas(niche: str, k: int = 3) -> str:
    out = []
    n = niche.strip()
    for i in range(k):
        title, synopsis = LOCAL_TEMPLATES[i % len(LOCAL_TEMPLATES)]
        trend = TREND_SOUNDS[i % len(TREND_SOUNDS)]
        tags = " ".join(TREND_TAGS[:3]) + f" #{n.replace(' ', '')}"
        block = textwrap.dedent(f"""
        *–ò–¥–µ—è {i+1}: {md2_escape(title)}*
        ‚úçÔ∏è –°—Ü–µ–Ω–∞—Ä–∏–π: {md2_escape(synopsis.format(niche=n))}
        üìù –ü–æ–¥–ø–∏—Å—å: {md2_escape(tags)}
        üé∂ –ó–≤—É–∫: {md2_escape(trend)}
        """).strip()
        out.append(block)
    return "\n\n".join(out)

def cache_get(niche: str) -> Optional[str]:
    cur = conn.execute("SELECT ideas FROM cache WHERE niche=?", (niche.strip().lower(),))
    r = cur.fetchone()
    return r[0] if r else None

def cache_set(niche: str, ideas: str):
    with conn:
        conn.execute(
            "INSERT OR REPLACE INTO cache(niche, ideas, updated_at) VALUES (?, ?, ?)",
            (niche.strip().lower(), ideas, today()),
        )

# ---------- OpenAI ----------
_openai_client = None
if OPENAI_API_KEY:
    try:
        from openai import OpenAI
        _openai_client = OpenAI(api_key=OPENAI_API_KEY)
        log.info("OpenAI client initialized")
    except Exception as e:
        log.warning("OpenAI init failed: %s", e)
        _openai_client = None

OPENAI_SYSTEM = (
    "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ SMM-—Å—Ç—Ä–∞—Ç–µ–≥–∞. –ì–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è Reels/TikTok "
    "—Å —á—ë—Ç–∫–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º, —Ö—É–∫-—Ñ—Ä–∞–∑–æ–π, –ø–æ–¥–ø–∏—Å—å—é –∏ –Ω–∞–º—ë–∫–æ–º –Ω–∞ —Ç—Ä–µ–Ω–¥–æ–≤—ã–π –∑–≤—É–∫. –ë–µ–∑ –≤–æ–¥—ã."
)

async def ai_generate_ideas(niche: str, k: int = 3) -> str:
    if not _openai_client:
        return await asyncio.to_thread(local_generate_ideas, niche, k)

    user_prompt = (
        f"–ù–∏—à–∞: {niche}\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {k} –∏–¥–µ–π Reels. "
        "–§–æ—Ä–º–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–π:\n"
        "1) *–ù–∞–∑–≤–∞–Ω–∏–µ*\n"
        "2) –°—Ü–µ–Ω–∞—Ä–∏–π 2‚Äì4 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
        "3) –ü–æ–¥–ø–∏—Å—å (3‚Äì5 —Ö—ç—à—Ç–µ–≥–æ–≤)\n"
        "4) –ó–≤—É–∫ (–Ω–∞–º—ë–∫ –Ω–∞ —Ç—Ä–µ–Ω–¥)\n"
        "–í—ã–≤–æ–¥–∏ –≤ Markdown, –±–µ–∑ –¥–ª–∏–Ω–Ω—ã—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π."
    )
    try:
        resp = await asyncio.to_thread(
            _openai_client.chat.completions.create,
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": OPENAI_SYSTEM},
                {"role": "user", "content": user_prompt},
            ],
            temperature=0.8,
            max_tokens=800,
        )
        text = resp.choices[0].message.content.strip()
        return text
    except Exception as e:
        log.warning("OpenAI error, fallback to local: %s", e)
        return await asyncio.to_thread(local_generate_ideas, niche, k)

async def generate_ideas(niche: str, k: int = 3, use_cache: bool = True) -> str:
    if use_cache:
        cached = cache_get(niche)
        if cached:
            return cached
    ideas = await ai_generate_ideas(niche, k)
    cache_set(niche, ideas)
    return ideas

DAY_THEMES = ["–ë–æ–ª—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞", "–õ–∞–π—Ñ—Ö–∞–∫", "–ú–∏—Ñ vs –§–∞–∫—Ç", "–ò—Å—Ç–æ—Ä–∏—è", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "–¢–û–ü-3 –æ—à–∏–±–∫–∏", "–ö–æ–ª–ª–∞–±"]
def plan_item(niche: str, day: int, theme: str) -> str:
    title, synopsis = LOCAL_TEMPLATES[day % len(LOCAL_TEMPLATES)]
    return textwrap.dedent(
        f"*–î–µ–Ω—å {day+1}: {md2_escape(theme)}*\n"
        f"üé¨ {md2_escape(title)}\n"
        f"‚úçÔ∏è {md2_escape(synopsis.format(niche=niche))}\n"
        f"üé∂ {md2_escape(TREND_SOUNDS[day % len(TREND_SOUNDS)])}"
    )

async def build_7day_plan(niche: str) -> str:
    blocks = [f"*–ü–ª–∞–Ω –Ω–∞ 7 –¥–Ω–µ–π –¥–ª—è:* _{md2_escape(niche)}_\n"]
    for i, theme in enumerate(DAY_THEMES):
        blocks.append(plan_item(niche, i, theme))
    return "\n\n".join(blocks)

# ---------- UI ----------
def keyboard_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üéØ –ï—â—ë –∏–¥–µ–∏", callback_data="more"),
         InlineKeyboardButton("üìÖ –ü–ª–∞–Ω 7 –¥–Ω–µ–π", callback_data="plan")],
        [InlineKeyboardButton("üî• –¢—Ä–µ–Ω–¥—ã", callback_data="trends"),
         InlineKeyboardButton("‚≠ê –ü—Ä–µ–º–∏—É–º", callback_data="premium")],
        [InlineKeyboardButton("üíæ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
    ])

WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏ –¥–ª—è Reels/TikTok ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∏—à—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: _—Ñ–∏—Ç–Ω–µ—Å_.\n"
    "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –¥–µ–Ω—å. –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å Stars –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ü—Ä–µ–º–∏—É–º.\n\n"
    "–ö–æ–º–∞–Ω–¥—ã: /ideas, /plan, /trends, /history, /premium, /stats, /help"
)
HELP = (
    "üÜò –ù–∞–ø–∏—à–∏ –Ω–∏—à—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ü—Ä–∏–º–µ—Ä—ã: _—Ñ–∏—Ç–Ω–µ—Å_, _–±–∞—Ä–±–µ—Ä_, _—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ –º–∞—Ç–µ—à–µ_.\n"
    "/ideas <–Ω–∏—à–∞> ‚Äî –∏–¥–µ–∏\n/plan <–Ω–∏—à–∞> ‚Äî –ø–ª–∞–Ω –Ω–∞ 7 –¥–Ω–µ–π\n/trends ‚Äî —Ç—Ä–µ–Ω–¥-–ø–æ–¥—Å–∫–∞–∑–∫–∏\n"
    "/history ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n/premium ‚Äî –∫—É–ø–∏—Ç—å Stars/–ü—Ä–µ–º–∏—É–º\n/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
)

# ---------- Handlers ----------
async def send_long_markdown(chat, text: str, reply_markup=None):
    parts = chunk(text)
    for i, p in enumerate(parts):
        await chat.send_message(
            p, parse_mode=ParseMode.MARKDOWN_V2,
            reply_markup=reply_markup if i == len(parts)-1 else None
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_user(update.effective_user)
    await update.message.reply_markdown_v2(md2_escape(WELCOME), reply_markup=keyboard_main())

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_markdown_v2(md2_escape(HELP), reply_markup=keyboard_main())

async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    ensure_user(u)
    used, quota, is_premium, balance = get_quota_state(u.id)
    cur = conn.execute("SELECT COUNT(*) FROM users")
    users_count = (cur.fetchone() or (0,))[0]
    txt = (
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{users_count}*\n"
        f"üëë –ü—Ä–µ–º–∏—É–º: *{'–¥–∞' if is_premium else '–Ω–µ—Ç'}*\n"
        f"‚≠ê Stars –±–∞–ª–∞–Ω—Å: *{balance}*\n"
        f"üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: *{used}/{quota}*"
    )
    await update.message.reply_markdown_v2(md2_escape(txt), reply_markup=keyboard_main())

async def trends_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tips = [
        "üéµ –°–º–µ–Ω–∞ –∫–∞–¥—Ä–∞ –Ω–∞ —Ö–ª–æ–ø–æ–∫ + —Ç–µ–∫—Å—Ç-–æ–≤–µ—Ä–ª–µ–π (3 bullets –ø–æ 1,5 —Å–µ–∫).",
        "üì¶ –ü–µ—Ä–µ—Ö–æ–¥ ¬´—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–æ–±–∫–∏¬ª –ø–æ–¥ –∫–æ—Ä–æ—Ç–∫–∏–π –¥—Ä–∞–º-—Å—Ç–∞–±.",
        "üåÄ –í—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ 360¬∞ —Å —Ä–µ–∑–∫–∏–º zoom-in –Ω–∞ –¥–µ—Ç–∞–ª–∏.",
        "üéØ Hook: –≤–æ–ø—Ä–æ—Å –≤ –ø–µ—Ä–≤–æ–º –∫–∞–¥—Ä–µ + –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –∑–∞ 10 —Å–µ–∫.",
        "üîÅ –†–µ—é–∑–∏—Ä—É–π —É–¥–∞—á–Ω—ã–π —Ö—É–∫ –≤ 3 –≤–∞—Ä–∏–∞—Ü–∏—è—Ö: —Ñ–æ–Ω, —Ä–∏—Ç–º, —Å—É–±—Ç–∏—Ç—Ä—ã.",
    ]
    body = "*–¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø—Ä–∏—ë–º—ã —Å–µ–π—á–∞—Å:*\n\n" + "\n".join([f"‚Ä¢ {md2_escape(x)}" for x in tips])
    await update.message.reply_markdown_v2(body, reply_markup=keyboard_main())

async def history_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    ensure_user(u)
    rows = list_history(u.id)
    if not rows:
        await update.message.reply_markdown_v2("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞\\. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–¥–µ–∏\\.", reply_markup=keyboard_main())
        return
    lines = ["*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:*"]
    for created_at, niche, _ideas in rows:
        lines.append(f"‚Ä¢ {md2_escape(str(created_at))}: _{md2_escape(niche)}_")
    await send_long_markdown(update.message.chat, "\n".join(lines), reply_markup=keyboard_main())

async def premium_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚≠ê *–ü—Ä–µ–º–∏—É–º –∏ Stars*\n\n"
        "‚Ä¢ 1 Star = 1 –¥–æ–ø. –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (—Å–≤–µ—Ä—Ö –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π)\n"
        "‚Ä¢ –ü—Ä–µ–º–∏—É–º 7 –¥–Ω–µ–π = –±–µ–∑–ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n\n"
        "–ù–∏–∂–µ ‚Äî –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ Telegram Stars."
    )
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å 5 ‚≠ê", callback_data="buy_stars_5"),
         InlineKeyboardButton("–ö—É–ø–∏—Ç—å 20 ‚≠ê", callback_data="buy_stars_20")],
        [InlineKeyboardButton("–ü—Ä–µ–º–∏—É–º 7 –¥–Ω–µ–π", callback_data="buy_premium_7")],
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status")]
    ])
    await update.message.reply_markdown_v2(md2_escape(text), reply_markup=kb)

async def ideas_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = (context.args or [])
    niche = " ".join(args).strip()
    if not niche:
        await update.message.reply_markdown_v2("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/ideas –Ω–∏—à–∞`", reply_markup=keyboard_main())
        return
    await _handle_generation(update, context, niche)

async def plan_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = (context.args or [])
    niche = " ".join(args).strip()
    if not niche:
        await update.message.reply_markdown_v2("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/plan –Ω–∏—à–∞`", reply_markup=keyboard_main())
        return
    await update.message.chat.send_action(ChatAction.TYPING)
    plan = await build_7day_plan(niche)
    await send_long_markdown(update.message.chat, plan, reply_markup=keyboard_main())

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç = –Ω–∏—à–∞
    niche = (update.message.text or "").strip()
    if not niche:
        return
    await _handle_generation(update, context, niche)

async def _handle_generation(update: Update, context: ContextTypes.DEFAULT_TYPE, niche: str):
    ensure_user(update.effective_user)
    user_id = update.effective_user.id
    used, quota, is_premium, balance = get_quota_state(user_id)

    # –õ–∏–º–∏—Ç—ã: –ø—Ä–µ–º–∏—É–º ‚Äî –±–µ–∑–ª–∏–º–∏—Ç; –æ–±—ã—á–Ω—ã–π ‚Äî 1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ/–¥–µ–Ω—å, –¥–∞–ª–µ–µ ‚Äî —Å–ø–∏—Å—ã–≤–∞–µ–º Stars
    allowed = is_premium or (used < quota)
    will_consume_star = False
    if not allowed:
        if balance > 0:
            will_consume_star = True
        else:
            msg = (
                f"–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω ({used}/{quota})\\. "
                f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å Stars: {balance}\\. –ù–∞–∂–º–∏ /premium —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–µ–º–∏—É–º\\."
            )
            await update.message.reply_markdown_v2(md2_escape(msg), reply_markup=keyboard_main())
            return

    await context.bot.send_chat_action(update.effective_chat.id, ChatAction.TYPING)
    ideas = await generate_ideas(niche, 3, use_cache=True)
    add_history(user_id, niche, ideas)
    for part in chunk(ideas):
        await update.message.reply_markdown_v2(part, reply_markup=keyboard_main())

    if not is_premium:
        if will_consume_star:
            consume_star_or_none(user_id)
            await update.message.reply_markdown_v2("‚úÖ –°–ø–∏—Å–∞–Ω–∞ 1 ‚≠ê –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é\\.", reply_markup=keyboard_main())
        else:
            inc_quota(user_id)

# ---------- Callback (–∫–Ω–æ–ø–∫–∏) ----------
async def callback_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    chat_id = query.message.chat_id
    user = update.effective_user
    ensure_user(user)

    if data == "more":
        await query.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∏—à—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ —è –ø—Ä–∏—à–ª—é –µ—â—ë –∏–¥–µ–∏ ‚úçÔ∏è", reply_markup=keyboard_main())
    elif data == "plan":
        await query.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/plan –Ω–∏—à–∞`", parse_mode=ParseMode.MARKDOWN_V2, reply_markup=keyboard_main())
    elif data == "trends":
        await trends_cmd(Update(update.to_dict()), context)  # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º
    elif data == "history":
        # –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é
        rows = list_history(user.id)
        if not rows:
            await query.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=keyboard_main())
        else:
            head = ["*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:*"]
            for created_at, niche, _ideas in rows:
                head.append(f"‚Ä¢ {created_at}: {niche}")
            await query.message.reply_markdown_v2(md2_escape("\n".join(head)), reply_markup=keyboard_main())
    elif data == "premium":
        await premium_cmd(Update(update.to_dict()), context)
    elif data == "check_status":
        used, quota, is_premium, bal = get_quota_state(user.id)
        txt = f"üëë –ü—Ä–µ–º–∏—É–º: {'–¥–∞' if is_premium else '–Ω–µ—Ç'}\n‚≠ê –ë–∞–ª–∞–Ω—Å: {bal}\nüéÅ –°–µ–≥–æ–¥–Ω—è: {used}/{quota}"
        await query.message.reply_markdown_v2(md2_escape(txt), reply_markup=keyboard_main())
    elif data.startswith("buy_stars_"):
        amount = 5 if data.endswith("5") else 20
        await create_stars_invoice(context, chat_id, f"{amount} Stars –ø–∞–∫–µ—Ç", f"stars_pack_{amount}", amount)
    elif data == "buy_premium_7":
        # –£—Å–ª–æ–≤–Ω–æ –ø—Ä–æ–¥–∞—ë–º –ø—Ä–µ–º–∏—É–º –∑–∞ Stars (–Ω–∞–ø—Ä–∏–º–µ—Ä 30 ‚≠ê)
        await create_stars_invoice(context, chat_id, "–ü—Ä–µ–º–∏—É–º 7 –¥–Ω–µ–π", "premium_7d", 30)
    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=keyboard_main())

# ---------- Payments (Stars) ----------
# –î–ª—è Stars: currency='XTR', amount ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∑–≤—ë–∑–¥.
# –†–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ sendInvoice + successful_payment.
async def create_stars_invoice(context: ContextTypes.DEFAULT_TYPE, chat_id: int, title: str, payload: str, stars_amount: int):
    prices = [LabeledPrice(label=title, amount=stars_amount)]
    await context.bot.send_invoice(
        chat_id=chat_id,
        title=title,
        description=title,
        payload=payload,
        provider_token="",  # –¥–ª—è Stars –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        currency="XTR",
        prices=prices,
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False,
        start_parameter=f"{payload}_param",
    )

async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    ensure_user(u)
    sp = update.message.successful_payment
    payload = sp.invoice_payload
    total_stars = 0
    for p in sp.order_info.prices if sp.order_info and getattr(sp.order_info, 'prices', None) else sp.prices:
        total_stars += p.amount

    # –ï—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º–∞ ‚Äî –¥–∞—ë–º 7 –¥–Ω–µ–π, –∏–Ω–∞—á–µ –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
    if payload == "premium_7d":
        until = set_premium(u.id, 7)
        await update.message.reply_text(f"‚úÖ –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ {until}")
    elif payload.startswith("stars_pack_"):
        add_stars(u.id, total_stars)
        await update.message.reply_text(f"‚úÖ –ó–∞—á–∏—Å–ª–µ–Ω–æ ‚≠ê: {total_stars}")
    else:
        # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ: –∑–∞—á–∏—Å–ª—è–µ–º
        add_stars(u.id, total_stars)
        await update.message.reply_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –∑–≤—ë–∑–¥—ã: {total_stars}")

# ---------- Admin ----------
async def admin_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return
    args = context.args or []
    if len(args) >= 3 and args[0] == "grant":
        try:
            uid = int(args[1]); days = int(args[2])
            until = set_premium(uid, days)
            await update.message.reply_text(f"–û–∫, –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –¥–æ {until}")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
        return
    if len(args) >= 3 and args[0] == "stars":
        try:
            uid = int(args[1]); amount = int(args[2])
            add_stars(uid, amount)
            await update.message.reply_text(f"–û–∫, –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} ‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
        return
    await update.message.reply_text("admin grant <user_id> <days> | admin stars <user_id> <amount>")

# ---------- Errors ----------
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    log.exception("Exception while handling an update: %s", context.error)

# ---------- Application ----------
def build_app() -> Application:
    app: Application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("stats", stats_cmd))
    app.add_handler(CommandHandler("trends", trends_cmd))
    app.add_handler(CommandHandler("history", history_cmd))
    app.add_handler(CommandHandler("premium", premium_cmd))
    app.add_handler(CommandHandler("ideas", ideas_cmd))
    app.add_handler(CommandHandler("plan", plan_cmd))
    app.add_handler(CommandHandler("admin", admin_cmd))

    # Callback-–∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(callback_router))

    # –ü–ª–∞—Ç–µ–∂–∏
    app.add_handler(PreCheckoutQueryHandler(precheckout_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))

    # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Üí –∫–∞–∫ –Ω–∏—à–∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))

    # –û—à–∏–±–∫–∏
    app.add_error_handler(error_handler)

    return app

async def main():
    app = build_app()

    # –ß–∏—Å—Ç–∏–º webhook, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å polling
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        log.warning("delete_webhook failed: %s", e)

    # –°—Ç–∞—Ä—Ç—É–µ–º polling; –¥—Ä–æ–ø–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–≤–æ—Å—Ç –∞–ø–¥–µ–π—Ç–æ–≤
    await app.initialize()
    await app.start()
    await app.updater.start_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True,
        timeout=30
    )

    # –ë–ª–æ–∫–∏—Ä—É–µ–º—Å—è –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    await app.updater.wait()
    await app.stop()
    await app.shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        log.info("Bot stopped by user")
