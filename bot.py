# bot.py
import os
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import openai
import sqlite3
from datetime import datetime, timedelta

# =======================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# =======================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# =======================
# –¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =======================
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
DAILY_FREE_QUOTA = int(os.environ.get("DAILY_FREE_QUOTA", 3))
ADMIN_USER_ID = int(os.environ.get("ADMIN_USER_ID", 0))  # —Ç–≤–æ–π ID –¥–ª—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥

# =======================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
# =======================
openai.api_key = OPENAI_API_KEY

# =======================
# –†–∞–±–æ—Ç–∞ —Å SQLite
# =======================
DB_FILE = "data.db"

def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            daily_count INTEGER,
            last_reset TEXT
        )
    ''')
    conn.commit()
    conn.close()

def reset_daily_counts():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    now = datetime.utcnow()
    c.execute("SELECT user_id, last_reset FROM users")
    rows = c.fetchall()
    for user_id, last_reset in rows:
        if last_reset is None or datetime.fromisoformat(last_reset) + timedelta(days=1) < now:
            c.execute("UPDATE users SET daily_count = 0, last_reset = ? WHERE user_id = ?", (now.isoformat(), user_id))
    conn.commit()
    conn.close()

def increment_user_count(user_id, username):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT daily_count FROM users WHERE user_id=?", (user_id,))
    row = c.fetchone()
    now = datetime.utcnow().isoformat()
    if row:
        c.execute("UPDATE users SET daily_count = daily_count + 1, last_reset=? WHERE user_id=?", (now, user_id))
    else:
        c.execute("INSERT INTO users (user_id, username, daily_count, last_reset) VALUES (?, ?, ?, ?)", (user_id, username, 1, now))
    conn.commit()
    conn.close()

def get_user_count(user_id):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT daily_count FROM users WHERE user_id=?", (user_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else 0

# =======================
# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
# =======================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø AI Reels Generator Bot.\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–º—É, –∏ —è –¥–∞–º –∏–¥–µ–∏ –¥–ª—è Reels/TikTok!"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞\n/help ‚Äî –ø–æ–º–æ—â—å\n/idea <—Ç–µ–º–∞> ‚Äî –ø–æ–ª—É—á–∏—Ç—å AI –∏–¥–µ—é\n"
    )

async def generate_idea(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "unknown"
    
    # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
    reset_daily_counts()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–æ—Ç—ã
    count = get_user_count(user_id)
    if count >= DAILY_FREE_QUOTA:
        await update.message.reply_text(
            f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ {DAILY_FREE_QUOTA} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–¥–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. üåü"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É
    if context.args:
        topic = " ".join(context.args)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /idea")
        return
    
    increment_user_count(user_id, username)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–∏ —á–µ—Ä–µ–∑ OpenAI
    try:
        prompt = f"–ü—Ä–µ–¥–ª–æ–∂–∏ 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è Instagram Reels –∏–ª–∏ TikTok –Ω–∞ —Ç–µ–º—É: {topic}. –ö–æ—Ä–æ—Ç–∫–æ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ."
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role":"user","content":prompt}],
            temperature=0.8
        )
        ideas = response.choices[0].message.content
        await update.message.reply_text(f"üé¨ –ò–¥–µ–∏ –ø–æ —Ç–µ–º–µ '{topic}':\n\n{ideas}")
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# =======================
# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
# =======================
async def grant_premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    if context.args:
        try:
            user_id = int(context.args[0])
            conn = sqlite3.connect(DB_FILE)
            c = conn.cursor()
            c.execute("UPDATE users SET daily_count = 0 WHERE user_id=?", (user_id,))
            conn.commit()
            conn.close()
            await update.message.reply_text(f"–ü—Ä–µ–º–∏—É–º –∫–≤–æ—Ç–∞ –¥–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        except Exception:
            await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /grantpremium")

# =======================
# –°—Ç—Ä–æ–∏–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# =======================
def build_app():
    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("idea", generate_idea))
    app.add_handler(CommandHandler("grantpremium", grant_premium))
    return app

if __name__ == "__main__":
    app = build_app()
    app.run_polling()  # –î–ª—è Render polling –ø—Ä–æ—â–µ. –î–ª—è –≤–µ–±—Ö—É–∫–∞ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ run_webhook()
